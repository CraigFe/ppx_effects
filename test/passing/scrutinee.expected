type _ Obj.Effect_handlers.eff +=  
  | E: string Obj.Effect_handlers.eff 
let f () = Obj.Effect_handlers.perform E
let g () = f
let _ =
  Ppx_effects_runtime.try_with f ()
    {
      Ppx_effects_runtime.effc =
        (let effc : type continue_input.
           continue_input Obj.Effect_handlers.eff ->
             ((continue_input, _) Obj.Effect_handlers.Deep.continuation -> _)
               option
           = function | E -> Some ((fun _ -> "")) | _ -> None in
         effc)
    }
let _ =
  Ppx_effects_runtime.try_with (fun `unit -> (Fun.id f) ()) `unit
    {
      Ppx_effects_runtime.effc =
        (let effc : type continue_input.
           continue_input Obj.Effect_handlers.eff ->
             ((continue_input, _) Obj.Effect_handlers.Deep.continuation -> _)
               option
           = function | E -> Some ((fun _ -> "")) | _ -> None in
         effc)
    }
let _ =
  Ppx_effects_runtime.try_with (fun `unit -> f (Fun.id ())) `unit
    {
      Ppx_effects_runtime.effc =
        (let effc : type continue_input.
           continue_input Obj.Effect_handlers.eff ->
             ((continue_input, _) Obj.Effect_handlers.Deep.continuation -> _)
               option
           = function | E -> Some ((fun _ -> "")) | _ -> None in
         effc)
    }
let _ =
  Ppx_effects_runtime.try_with (fun `unit -> g () ()) `unit
    {
      Ppx_effects_runtime.effc =
        (let effc : type continue_input.
           continue_input Obj.Effect_handlers.eff ->
             ((continue_input, _) Obj.Effect_handlers.Deep.continuation -> _)
               option
           = function | E -> Some ((fun _ -> "")) | _ -> None in
         effc)
    }
let _ =
  Ppx_effects_runtime.try_with (fun `unit -> let () = () in f ()) `unit
    {
      Ppx_effects_runtime.effc =
        (let effc : type continue_input.
           continue_input Obj.Effect_handlers.eff ->
             ((continue_input, _) Obj.Effect_handlers.Deep.continuation -> _)
               option
           = function | E -> Some ((fun _ -> "")) | _ -> None in
         effc)
    }
